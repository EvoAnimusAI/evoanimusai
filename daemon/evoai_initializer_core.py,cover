  # daemon/evoai_initializer_core.py
  # -*- coding: utf-8 -*-
> """
> Inicializador del n√∫cleo EvoAI.
> Carga segura de configuraci√≥n, contexto, agente, motor simb√≥lico, decisi√≥n, ejecutor y herramientas.
> Cumple con est√°ndares gubernamentales, cient√≠ficos y de ultra secreto.
> """
  
! import logging
! from core.config import Config
! from core.context import EvoContext
! from symbolic_ai.symbolic_rule_engine import SymbolicRuleEngine  # ‚úÖ Motor simb√≥lico real
! from daemon.evoai_initializer_security import load_secure_key
! from daemon.evoai_initializer_agent import initialize_agent
! from daemon.evoai_initializer_engine import initialize_engine
! from daemon.evoai_initializer_executor import initialize_executor
! from daemon.evoai_initializer_tools import initialize_support_tools
! from daemon.evoai_initializer_decision import initialize_decision
  
! logger = logging.getLogger("EvoAI.Core")
  
! def initialize_core_components():
!     logger.info("[INIT] Inicializando n√∫cleo EvoAI...")
  
      # üîê Seguridad: Cargar clave maestra
!     daemon_key = load_secure_key()
  
      # ‚öôÔ∏è Configuraci√≥n obligatoria antes de cualquier uso del sistema
!     try:
!         Config.load_from_file("config/evo_config.json")
!         logger.info("[CONFIG] Configuraci√≥n cargada exitosamente.")
!     except Exception as e:
!         logger.critical(f"[CONFIG] Fallo al cargar configuraci√≥n: {e}")
!         raise SystemExit(1)
  
      # üß† Contexto simbi√≥tico-evolutivo
!     context = EvoContext()
  
      # ü§ñ Inicializaci√≥n del agente principal
!     agent = initialize_agent(context=context)
  
      # üîÑ Inicializaci√≥n del motor de aprendizaje o evoluci√≥n
!     engine = initialize_engine(agent, context)
  
      # ‚úÖ Motor simb√≥lico real (para el sistema de decisi√≥n)
!     symbolic_engine = SymbolicRuleEngine()
  
      # üß†üß† Componente de decisi√≥n simb√≥lica
!     decision = initialize_decision(context, agent, symbolic_engine)
  
      # üöÄ Ejecutores de ciclo y action
!     executor = initialize_executor(agent, engine, context)
  
      # üß∞ Herramientas de soporte (monitoring, IO, etc.)
!     tools = initialize_support_tools(engine, context, daemon_key)
  
!     logger.info("[INIT] N√∫cleo EvoAI completamente inicializado y seguro.")
  
!     return {
!         "context": context,
!         "agent": agent,
!         "engine": engine,
!         "decision": decision,
!         "executor": executor,
!         **tools,
!     }
