# daemon/evoai_context.py
# -*- coding: utf-8 -*-
"""
Contexto operativo central de EvoAI.
Provee un marco simb√≥lico, memoria, estado y configuraci√≥n,
con trazabilidad exhaustiva para auditor√≠a y monitoreo.
Cumple est√°ndares gubernamentales de seguridad y control.
"""

import datetime
import logging
from typing import Optional, Dict, Any

from symbolic_ai.symbolic_learning_engine import SymbolicLearningEngine
from core.memory import AgentMemory
from core.config import Config
from core.state_manager import StateManager

logger = logging.getLogger("EvoAI.Context")

def normalizar_observacion(observacion: Dict[str, Any]) -> Dict[str, Any]:
    """
    Traduce claves de observaciones desde espa√±ol (u otros alias)
    a los t√©rminos esperados en ingl√©s, especialmente 'entropy'.
    """
    traducciones = {
        'entropy': 'entropy',
        'noise': 'noise',
        'state': 'state',
        'ultima_accion': 'last_action',
        'last_action': 'last_action',
    }

    normalizada = {traducciones.get(k, k): v for k, v in observacion.items()}

    print(f"[üõ†Ô∏è NORMALIZACI√ìN] Original: {observacion}")
    print(f"[‚úÖ NORMALIZADA] Resultante: {normalizada}")

    return normalizada

class EvoAIContext:
    """
    Contexto global para la ejecuci√≥n del agente EvoAI.
    Componentes:
    - Motor simb√≥lico (SymbolicLearningEngine o compatible)
    - Memoria (AgentMemory)
    - Estado (StateManager)
    - Configuraci√≥n (Config)
    
    Funcionalidades:
    - Actualizaci√≥n del contexto con validaci√≥n y trazabilidad
    - Registro expl√≠cito de conceptos simb√≥licos
    - Exposici√≥n de estado para auditor√≠a
    """

    def __init__(
        self,
        symbolic_engine: Optional[Any] = None,
        app_name: str = "EvoAI",
        version: str = "1.0.0"
    ):
        print(f"[üß† INIT] Inicializando EvoAIContext...")
        self.symbolic: SymbolicLearningEngine = symbolic_engine if symbolic_engine else SymbolicLearningEngine()
        self.memory: AgentMemory = AgentMemory()
        self.state: StateManager = StateManager()
        self.config: Config = Config(app_name=app_name, version=version)
        self.engine: Optional[Any] = None  # Motor externo si aplica

        logger.info(f"üîß EvoAIContext inicializado [{datetime.datetime.utcnow().isoformat()}]")
        print(f"[‚úÖ INIT] EvoAIContext activo ‚Äî Versi√≥n: {version}")

    def update(self, observation: Dict[str, Any]) -> None:
        """
        Actualiza el contexto con una nueva observaci√≥n.
        Valida y registra la observaci√≥n, propag√°ndola internamente.
        """
        if not isinstance(observation, dict):
            logger.error(f"Observaci√≥n inv√°lida (no dict): {observation}")
            raise TypeError("La observaci√≥n debe ser un diccionario v√°lido.")

        try:
            observacion_normalizada = normalizar_observacion(observation)

            if "last_action" in observacion_normalizada:
                print(f"[üîÅ INFO] √öltima acci√≥n reportada: {observacion_normalizada['last_action']}")

            print(f"[üì° CONTEXTO::OBSERVE] Enviando al motor simb√≥lico: {observacion_normalizada}")

            if self.symbolic:
                self.symbolic.observe(observacion_normalizada)

            if self.state:
                self.state.update(observation)

            logger.info(f"[Context] Observaci√≥n registrada: {observation}")
            print(f"[‚úÖ CONTEXTO ACTUALIZADO] con {list(observacion_normalizada.keys())}")

        except Exception as ex:
            logger.exception(f"Error al actualizar contexto con la observaci√≥n: {ex}")
            print(f"[‚ùå ERROR::UPDATE CONTEXT] {ex}")
            raise

    def add_concept(self, concept: str, source: str = "unknown") -> None:
        """
        Agrega un concepto simb√≥lico al motor simb√≥lico con trazabilidad.
        """
        if not isinstance(concept, str) or not concept.strip():
            logger.error(f"Concepto inv√°lido para agregar: '{concept}'")
            raise ValueError("Concepto debe ser una cadena no vac√≠a.")

        if self.symbolic:
            try:
                if hasattr(self.symbolic, "register_concept"):
                    self.symbolic.register_concept(concept.strip(), source)
                    logger.info(f"[Context] Concepto agregado: '{concept}' (fuente: {source})")
                    print(f"[‚ûï CONCEPTO] '{concept}' agregado desde '{source}'")
                else:
                    logger.warning("[Context] register_concept no implementado en SymbolicLearningEngine")
                    print(f"[‚ö†Ô∏è WARNING] register_concept no soportado en el motor simb√≥lico")
            except Exception as ex:
                logger.exception(f"Error al agregar concepto '{concept}': {ex}")
                print(f"[‚ùå ERROR::ADD CONCEPT] {ex}")
                raise

    def get_state_snapshot(self) -> Dict[str, Any]:
        """
        Obtiene una instant√°nea del estado interno del contexto.
        Incluye memoria, estado simb√≥lico, configuraci√≥n y timestamp.
        """
        try:
            snapshot = {
                "timestamp_utc": datetime.datetime.utcnow().isoformat(),
                "symbolic_state": self.symbolic.export_state() if self.symbolic else None,
                "memory_summary": self.memory.summary() if self.memory else None,
                "state_status": self.state.status() if self.state and hasattr(self.state, "status") else None,
                "config_version": getattr(self.config, "version", "unknown"),
            }

            logger.debug(f"[Context] Snapshot state: {snapshot}")
            print(f"[üì∏ SNAPSHOT] {snapshot}")
            return snapshot

        except Exception as ex:
            logger.exception(f"Error al obtener snapshot del state: {ex}")
            print(f"[‚ùå ERROR::SNAPSHOT] {ex}")
            raise
