# evoai_network_learning.py
# -*- coding: utf-8 -*-
"""
M√≥dulo para aprendizaje simb√≥lico en red y adquisici√≥n de conceptos desde la web.
Dise√±ado bajo est√°ndares de trazabilidad y seguridad informacional.
"""

import os
import logging
from datetime import datetime
from symbolic_ai.web_filter import extract_symbolic_concepts
from symbolic_ai.symbolic_logger import log_concept, log_synthesis

logger = logging.getLogger("EvoAI.NetworkLearning")

def learn_from_web(consciousness, net, topic: str, url: str, context, cycle: int):
    """
    Extrae conocimiento desde la red, lo resume y lo convierte en conceptos simb√≥licos.
    Efect√∫a registro trazado de s√≠ntesis y conceptos en almacenamiento y logs.

    :param consciousness: N√∫cleo de consciencia con evaluaci√≥n de integridad.
    :param net: M√≥dulo de red que permite extraction y s√≠ntesis.
    :param topic: T√≥pico objetivo del aprendizaje.
    :param url: Fuente URL validada.
    :param context: M√≥dulo contextual para integraci√≥n simb√≥lica.
    :param cycle: N√∫mero de ciclo para trazabilidad.
    :return: Resumen generado o None en caso de error.
    """
    try:
        # Validaci√≥n previa del n√∫cleo consciente
        consciousness.evaluate_integrity()
        logger.info(f"üåê Aprendiendo sobre '{topic}' desde: {url}")

        # Aprendizaje y s√≠ntesis del conocimiento
        net.learn_from_url(url, topic)
        summary = net.summarize_topic(topic)

        # Registro formal de la s√≠ntesis y almacenamiento
        log_synthesis(f"üìö Resumen '{topic}':\n{summary}")
        save_topic_summary(topic, summary, cycle)

        # Extraction y registro de conceptos simb√≥licos
        for concept in extract_symbolic_concepts(summary):
            context.add_concept(concept, source=f"wiki:{topic}")
            log_concept(concept, source=f"wiki:{topic}")

        return summary

    except Exception as e:
        logger.error(f"‚ùå Error al aprender desde red: {e}", exc_info=True)
        return None


def save_topic_summary(topic: str, summary: str, cycle: int):
    """
    Guarda en disco el resumen textual del conocimiento aprendido para auditor√≠a.

    :param topic: Tema del resumen.
    :param summary: Texto sintetizado.
    :param cycle: Ciclo para nombramiento controlado.
    """
    os.makedirs("knowledge_logs", exist_ok=True)
    filename = f"knowledge_logs/cycle_{cycle}_{topic.replace(' ', '_')}.txt"
    with open(filename, "w", encoding="utf-8") as f:
        f.write(summary)
