# -*- coding: utf-8 -*-
"""
metacognition/supervisor_metacognitivo.py

Supervisor Metacognitivo Continuo ‚Äî Nivel militar
Monitorea en tiempo real el estado cognitivo del sistema EvoAI.
Ejecuta autom√°ticamente el protocolo de recuperaci√≥n cuando se detectan condiciones cr√≠ticas.
"""

import logging
from typing import Dict, Any
from metacognition.metacognitive_recovery_manager import protocolo_de_emergencia

# üßæ Registro simbi√≥tico de eventos
from utils.logger_simbotico import (
    log_halt_event,
    save_crisis_snapshot,
    append_recovery_session,
)

logger = logging.getLogger("EvoAI.SupervisorMetacognitivo")

class SupervisorMetacognitivo:
    def __init__(self, threshold_cycles: int = 20, entropy_limit: float = 0.95):
        self.threshold_cycles = threshold_cycles
        self.entropy_limit = entropy_limit
        print(f"[üß† SUPERVISOR] Inicializado. Threshold: {threshold_cycles} ciclos | L√≠mite entrop√≠a: {entropy_limit:.2f}")

    def evaluar(self, contexto: Dict[str, Any]) -> Dict[str, Any]:
        print("[üîé SUPERVISOR] Evaluando estado simb√≥lico actual...")

        ciclos = contexto.get("cycles_without_new_rule", 0)
        entropy = contexto.get("entropy", 0.0)
        mutation_budget = contexto.get("mutation_budget", 1)

        print(f"[üìä METRICAS] cycles_without_new_rule = {ciclos} | entropy = {entropy:.4f} | mutation_budget = {mutation_budget}")

        if ciclos >= self.threshold_cycles or entropy >= self.entropy_limit or mutation_budget <= 0:
            print("[‚ö†Ô∏è ALERTA] Se detecta estado cr√≠tico. Ejecutando recuperaci√≥n...")
            logger.warning("[SUPERVISOR] Condiciones cr√≠ticas detectadas. Ejecutando recuperaci√≥n autom√°tica.")

            # üìù Registro HALT
            halt_reason = "Evolution stagnation" if ciclos >= self.threshold_cycles else "Entropy overload" if entropy >= self.entropy_limit else "No mutation budget"
            log_halt_event({
                "evento": "HALT",
                "razon": halt_reason,
                "ciclo": contexto.get("cycle", -1),
                "entropia": entropy,
                "mutation_budget": mutation_budget,
                "error_rate": contexto.get("error_rate", "N/A"),
            })

            # üßä Guardar snapshot cr√≠tico
            save_crisis_snapshot(contexto, contexto.get("cycle", -1))

            # üõ†Ô∏è Ejecutar recuperaci√≥n simbi√≥tica
            resultado = protocolo_de_emergencia(contexto)

            # üì• Registro de recuperaci√≥n
            append_recovery_session({
                "motivo": halt_reason,
                "ciclo": contexto.get("cycle", -1),
                "resultado": resultado,
                "entropia": entropy,
            })

            return resultado
        else:
            print("[‚úÖ OK] Sistema simb√≥lico estable. No se requieren acciones.")
            return {
                "status": "stable",
                "message": "Estado simb√≥lico estable bajo supervisi√≥n.",
            }
