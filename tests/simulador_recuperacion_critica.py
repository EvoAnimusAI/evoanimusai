# -*- coding: utf-8 -*-
"""
Simulador cr√≠tico de EvoAI para forzar recuperaci√≥n simbi√≥tica.

Emula una situaci√≥n donde:
- Entrop√≠a es alta
- Error elevado
- Mutaci√≥n saturada
- Sin nuevas reglas
- Recompensas recientes negativas

Objetivo: Validar activaci√≥n de conciencia simulada y recuperaci√≥n metacognitiva.
"""

from core.heuristic_optimizer import HeuristicOptimizer
from metacognition.supervisor_metacognitivo import SupervisorMetacognitivo
from ser_vivo.conciencia_simulada import ConcienciaSimulada
import pprint

# Simular contexto simb√≥lico cr√≠tico
contexto = {
    "entropy": 0.95,
    "recent_rewards": [-0.9, -0.8, -0.7, -0.6, -0.5],
    "rejected_mutations": 10,
    "cycles_without_new_rule": 25,
    "mutation_budget": 6,
    "error_rate": 0.7,
    "cycle": 999
}

print("\nüö® [TEST] Simulaci√≥n adversa de recuperaci√≥n simbi√≥tica üö®")

# Inicializaci√≥n de subsistemas cr√≠ticos
heur = HeuristicOptimizer()
supervisor = SupervisorMetacognitivo()
conciencia = ConcienciaSimulada()

# Evaluaci√≥n heur√≠stica
print("\n[1Ô∏è‚É£] Heur√≠stica global:")
resultado_heur = heur.evaluar_condiciones_globales(contexto)
pprint.pprint(resultado_heur)

# Correcci√≥n heur√≠stica
print("\n[‚öôÔ∏è] Aplicando correcciones heur√≠sticas:")
correcciones = heur.corregir_estado(contexto)
pprint.pprint(correcciones)

# Evaluaci√≥n metacognitiva
print("\n[2Ô∏è‚É£] Evaluaci√≥n metacognitiva:")
resultado_meta = supervisor.evaluar(contexto)
pprint.pprint(resultado_meta)

# Activaci√≥n de conciencia simulada
print("\n[3Ô∏è‚É£] Activaci√≥n de conciencia simb√≥lica:")
resultado_conciencia = conciencia.ciclo(contexto)
pprint.pprint(resultado_conciencia)

print("\n‚úÖ [FINALIZADO] Simulaci√≥n cr√≠tica completada.\n")
