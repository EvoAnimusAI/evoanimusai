  # core/network_access.py
  
! import requests
! import hashlib
! import logging
! from typing import Optional, Dict
! from bs4 import BeautifulSoup
! import re
  
  # Constantes configurables
! MASTER_KEY_DEFAULT = "A591243133418571088300454z"
! USER_AGENT = "EvoAI-Autonomous-Agent/1.0"
! REQUEST_TIMEOUT = 10
! MAX_SUMMARY_LINES = 5
! MIN_PARAGRAPH_LENGTH = 80
! MAX_CONTENT_LENGTH = 5000
  
  # Configuraci√≥n b√°sica del logger
! logger = logging.getLogger("NetworkAccess")
! logger.setLevel(logging.DEBUG)
! ch = logging.StreamHandler()
! ch.setLevel(logging.DEBUG)
! formatter = logging.Formatter("[%(asctime)s] %(levelname)s - %(message)s")
! ch.setFormatter(formatter)
! logger.addHandler(ch)
  
  
! class NetworkAccess:
!     """
!     Class responsible for network interactions, including authentication,
!     web searching, page fetching, knowledge learning, and summarization.
      
!     Attributes:
!         master_key (str): The master key for authentication.
!         headers (Dict[str, str]): HTTP headers to use in requests.
!         knowledge_base (Dict[str, str]): Internal store of learned knowledge by topic.
!         verbose (bool): Flag to control verbose logging.
!     """
  
!     def __init__(self, master_key: str = MASTER_KEY_DEFAULT, verbose: bool = True) -> None:
!         """
!         Initializes the NetworkAccess instance.
          
!         Args:
!             master_key (str): The master authentication key.
!             verbose (bool): Whether to enable verbose logging.
!         """
!         self.master_key: str = master_key
!         self.headers: Dict[str, str] = {"User-Agent": USER_AGENT}
!         self.knowledge_base: Dict[str, str] = {}
!         self.verbose: bool = verbose
  
!         if not self.verbose:
!             logger.setLevel(logging.WARNING)
!         else:
!             logger.setLevel(logging.DEBUG)
  
!         logger.debug("NetworkAccess instance created with master_key and verbose=%s", verbose)
  
!     def log(self, message: str, level: int = logging.INFO) -> None:
!         """
!         Logs a message with the specified severity level.
          
!         Args:
!             message (str): The message to log.
!             level (int): Logging level (e.g., logging.INFO, logging.ERROR).
!         """
!         if self.verbose:
!             logger.log(level, message)
  
!     def authenticate(self, key_input: str) -> bool:
!         """
!         Authenticates the given key against the stored master key.
          
!         Args:
!             key_input (str): The key to authenticate.
          
!         Returns:
!             bool: True if authentication succeeds, False otherwise.
!         """
!         if not isinstance(key_input, str):
!             self.log("Authentication failed: key_input must be a string", logging.ERROR)
!             return False
  
!         try:
!             input_hash = hashlib.sha256(key_input.encode("utf-8")).hexdigest()
!             expected_hash = hashlib.sha256(self.master_key.encode("utf-8")).hexdigest()
!             result = input_hash == expected_hash
!             self.log("‚úÖ Authentication succeeded." if result else "‚ùå Authentication failed.", logging.INFO)
!             return result
!         except Exception as e:
!             self.log(f"Exception during authentication: {e}", logging.ERROR)
!             return False
  
!     def search_web(self, query: str) -> str:
!         """
!         Generates a DuckDuckGo search URL for the provided query.
          
!         Args:
!             query (str): The search query string.
          
!         Returns:
!             str: The URL to perform the search.
!         """
!         if not isinstance(query, str) or not query.strip():
!             self.log("Invalid search query provided.", logging.WARNING)
!             return ""
  
!         self.log(f"üîç Searching the web for: {query}", logging.INFO)
!         url = f"https://duckduckgo.com/?q={query.strip().replace(' ', '+')}"
!         self.log(f"Search URL generated: {url}", logging.DEBUG)
!         return url
  
!     def fetch_page(self, url: str) -> str:
!         """
!         Fetches the content of a web page, returning cleaned text.
  
!         Args:
!             url (str): The URL of the web page to fetch.
          
!         Returns:
!             str: The cleaned text content of the page, or an error message.
!         """
!         if not isinstance(url, str) or not url.startswith(("http://", "https://")):
!             error_msg = f"‚ùå Invalid URL: {url}"
!             self.log(error_msg, logging.ERROR)
!             return error_msg
  
!         self.log(f"üì° Fetching page: {url}", logging.INFO)
!         try:
!             response = requests.get(url, headers=self.headers, timeout=REQUEST_TIMEOUT)
!             response.raise_for_status()
  
!             soup = BeautifulSoup(response.text, "html.parser")
!             text = soup.get_text()
!             clean_text = re.sub(r"\s+", " ", text).strip()
!             snippet = clean_text[:MAX_CONTENT_LENGTH]
!             self.log(f"üì• Page fetched and cleaned: {url} (content length: {len(snippet)})", logging.INFO)
!             return snippet
  
!         except requests.exceptions.HTTPError as http_err:
!             error_msg = f"‚ùå HTTP error {http_err.response.status_code} while fetching {url}"
!             self.log(error_msg, logging.ERROR)
!             return error_msg
!         except requests.exceptions.RequestException as req_err:
!             error_msg = f"‚ùå Network exception while fetching {url}: {req_err}"
!             self.log(error_msg, logging.ERROR)
!             return error_msg
!         except Exception as e:
!             error_msg = f"‚ùå Unexpected error while fetching {url}: {e}"
!             self.log(error_msg, logging.ERROR)
!             return error_msg
  
!     def learn_from_url(self, url: str, topic: str) -> None:
!         """
!         Fetches content from the URL and stores it in the knowledge base under the given topic.
  
!         Args:
!             url (str): The URL to fetch content from.
!             topic (str): The topic under which to store the learned content.
!         """
!         if not topic or not isinstance(topic, str):
!             self.log("‚ö†Ô∏è Invalid topic provided for learning.", logging.WARNING)
!             return
  
!         self.log(f"üß† Learning from URL: {url} under topic: '{topic.lower()}'", logging.INFO)
!         content = self.fetch_page(url)
!         if content and not content.startswith("‚ùå"):
!             self.knowledge_base[topic.lower()] = content
!             self.log(f"üß† Knowledge stored for topic: '{topic.lower()}'", logging.INFO)
!         else:
!             self.log(f"‚ö†Ô∏è Failed to learn from URL: {content}", logging.WARNING)
  
!     def summarize_topic(self, topic: str) -> str:
!         """
!         Summarizes the knowledge stored under the given topic.
  
!         Args:
!             topic (str): The topic to summarize.
          
!         Returns:
!             str: A summary of the topic or an error message if topic not found or insufficient data.
!         """
!         if not topic or not isinstance(topic, str):
!             self.log("‚ö†Ô∏è Invalid topic for summarization.", logging.WARNING)
!             return "‚ö†Ô∏è Invalid topic specified."
  
!         content = self.knowledge_base.get(topic.lower())
!         if not content:
!             self.log(f"‚ö†Ô∏è Topic '{topic}' not found in knowledge base.", logging.WARNING)
!             return "‚ö†Ô∏è Topic not found."
  
!         paragraphs = re.split(r"[\.\n]", content)
!         summary_lines = [p.strip() for p in paragraphs if len(p.strip()) >= MIN_PARAGRAPH_LENGTH][:MAX_SUMMARY_LINES]
  
!         if summary_lines:
!             summary = "\n".join(f"- {line}" for line in summary_lines)
!             self.log(f"üìù Summary generated for topic '{topic}'.", logging.INFO)
!             return summary
!         else:
!             self.log(f"‚ö†Ô∏è Insufficient content to summarize for topic '{topic}'.", logging.WARNING)
!             return "‚ö†Ô∏è Insufficient content to summarize."
  
  
! if __name__ == "__main__":
      # Ejemplo de uso para pruebas y demostraci√≥n
!     net_access = NetworkAccess(verbose=True)
  
!     test_key = "A591243133418571088300454z"
!     if net_access.authenticate(test_key):
!         query_url = net_access.search_web("symbolic evolutionary neural network")
!         logger.info(f"Generated search URL: {query_url}")
  
!         wiki_url = "https://en.wikipedia.org/wiki/Evolutionary_algorithm"
!         net_access.learn_from_url(wiki_url, "evolutionary algorithms")
  
!         summary = net_access.summarize_topic("evolutionary algorithms")
!         logger.info("Knowledge summary:")
!         print(summary)
!     else:
!         logger.error("Failed authentication with test key.")
