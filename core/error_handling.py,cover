  # -*- coding: utf-8 -*-
> """
> M√≥dulo de gesti√≥n avanzada de errores para EvoAnimusAI.
  
> üîê Nivel: Militar / Gubernamental
> üìå Prop√≥sito:
>     - Centralizar el tratamiento, registro y respuesta ante excepciones.
>     - Proveer mecanismos de defensa ante fallos simb√≥licos, mutaciones peligrosas y errores catastr√≥ficos.
>     - Habilitar auditor√≠a estructural y ejecuci√≥n segura.
> """
  
! import logging
! import functools
! import traceback
! import sys
! import os
! from typing import Callable, Type, Optional, Any, Dict
  
! class ErrorHandler:
!     """
!     Utilidad centralizada de gesti√≥n de errores con soporte para:
!         - Registro estandarizado.
!         - Asociaci√≥n de c√≥digos de error.
!         - Decoradores de ejecuci√≥n protegida.
!         - Cierre cr√≠tico del sistema.
!     """
      
!     def __init__(self, logger: Optional[logging.Logger] = None) -> None:
!         self.logger = logger or logging.getLogger("EvoAI.ErrorHandler")
!         self.error_registry: Dict[Type[BaseException], str] = {}
  
!     def register_error(self, error_type: Type[BaseException], error_code: str) -> None:
!         """Registra un tipo de error con un c√≥digo personalizado."""
!         self.error_registry[error_type] = error_code
!         self.logger.debug(f"[Registro de Error] {error_type.__name__} ‚Üí '{error_code}'")
  
!     def _get_error_code(self, exc_type: Type[BaseException]) -> str:
!         """Obtiene el c√≥digo registrado para un tipo de excepci√≥n."""
!         return self.error_registry.get(exc_type, "UNKNOWN_ERROR")
  
!     def log_exception(self, exc: Exception, context: Optional[str] = None) -> None:
!         """Registra una excepci√≥n con informaci√≥n contextual adicional."""
!         context_msg = f"Contexto: {context}" if context else "Sin contexto adicional"
!         error_code = self._get_error_code(type(exc))
!         self.logger.error(f"[Excepci√≥n - {error_code}] {exc} | {context_msg}", exc_info=True)
  
!     def handle(
!         self,
!         func: Optional[Callable] = None,
!         *,
!         on_error: Optional[Callable[[Exception], Any]] = None,
!         suppress: bool = False,
!     ) -> Callable:
!         """
!         Decorador para ejecutar funciones con manejo autom√°tico de errores.
!         Soporta uso con y sin argumentos.
!         """
!         def decorator(f: Callable) -> Callable:
!             @functools.wraps(f)
!             def wrapper(*args, **kwargs):
!                 try:
!                     return f(*args, **kwargs)
!                 except Exception as e:
!                     error_code = self._get_error_code(type(e))
!                     self.logger.error(f"[Error atrapado - {error_code}] {e}", exc_info=True)
!                     if on_error:
!                         try:
!                             on_error(e)
!                         except Exception as cb_exc:
!                             self.logger.error(f"[Fallo en on_error callback] {cb_exc}", exc_info=True)
!                     if not suppress:
!                         raise
!                     return None
!             return wrapper
  
!         return decorator(func) if func is not None else decorator
  
!     def handle_mutation_error(self, exc: Exception, function_name: Optional[str] = None) -> None:
!         """
!         Manejo especializado de errores ocurridos durante mutaciones simb√≥licas.
!         """
!         context = f"Mutaci√≥n fallida en funci√≥n: {function_name}" if function_name else "Mutaci√≥n simb√≥lica fallida"
!         self.log_exception(exc, context=context)
          # Aqu√≠ se podr√≠a notificar al m√≥dulo de autoconsciencia o activar un rollback
  
!     def critical_shutdown(self, reason: str) -> None:
!         """
!         Cierre estructurado del sistema en caso de error cr√≠tico irreversible.
!         """
!         self.logger.critical(f"[APAGADO CR√çTICO] Motivo: {reason}")
          # Posible extensi√≥n: notificar por red, registrar evento en disco, invocar backup
!         sys.exit(100)
  
!     def wrap_safe_execution(self, func: Callable) -> Callable:
!         """
!         Decorador para envolver funciones en ejecuci√≥n segura. Ideal para agentes, mutaciones y l√≥gica simb√≥lica.
!         """
!         @functools.wraps(func)
!         def wrapped(*args, **kwargs):
!             try:
!                 return func(*args, **kwargs)
!             except Exception as e:
!                 self.log_exception(e, context=f"Ejecuci√≥n segura de {func.__name__}")
!                 return None  # Se puede personalizar seg√∫n criticidad
!         return wrapped
