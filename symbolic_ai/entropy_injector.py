"""
entropy_injector.py ‚ñ∏ M√≥dulo de rescate simb√≥lico para EvoAI
Funci√≥n: Inyecta entrop√≠a artificial progresiva ante estancamiento simb√≥lico.
Nivel: Seguridad militar / trazabilidad completa / listo para producci√≥n.
"""

import datetime
import logging
import sys

# Logger local
logger = logging.getLogger("EntropyInjector")
if not logger.hasHandlers():
    handler = logging.StreamHandler(sys.stdout)
    formatter = logging.Formatter('%(asctime)s [%(levelname)s] [EntropyInjector] %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

# Configuraci√≥n
ENTROPY_TRIGGER_ITERATION = 20        # Umbral de ciclos para iniciar inyecci√≥n
ENTROPY_STEP = 0.05                   # Incremento de entrop√≠a por ciclo estancado
MAX_ENTROPY = 1.0                     # L√≠mite superior absoluto

def inject_entropy(context: dict, iteration: int) -> dict:
    """
    Inyecta entrop√≠a artificial al contexto si detecta estancamiento.

    Par√°metros:
        context (dict): Contexto simb√≥lico observado.
        iteration (int): N√∫mero de iteraci√≥n simb√≥lica actual.

    Retorna:
        dict: Contexto posiblemente modificado.
    """
    try:
        if not isinstance(context, dict):
            logger.error("Tipo de contexto inv√°lido. Se esperaba dict, se recibi√≥: %s", type(context))
            return context

        entropy = context.get("entropy", 0.0)

        print(f"[üß™ CHECK] Iteraci√≥n: {iteration} | Entrop√≠a actual: {entropy}")

        if entropy == 0.0 and iteration >= ENTROPY_TRIGGER_ITERATION:
            step_count = iteration - ENTROPY_TRIGGER_ITERATION + 1
            injected = round(min(MAX_ENTROPY, ENTROPY_STEP * step_count), 4)

            logger.warning("Entrop√≠a 0.0 detectada tras %d ciclos. Inyectando %.4f", step_count, injected)
            print(f"[‚ö†Ô∏è INJECT] Entrop√≠a artificial inyectada: {injected} (iter #{iteration})")

            context["entropy"] = injected
            context["__entropy_injected"] = True
            context["__entropy_level"] = injected

        else:
            print("[‚úÖ OK] No se requiere inyecci√≥n de entrop√≠a en este ciclo.")

        return context

    except Exception as ex:
        logger.exception("Fallo cr√≠tico durante la inyecci√≥n de entrop√≠a: %s", ex)
        print(f"[‚ùå CRASH] Excepci√≥n en inject_entropy(): {ex}")
        return context
