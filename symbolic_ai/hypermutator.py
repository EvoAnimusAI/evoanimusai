# symbolic_ai/hypermutator.py
# -*- coding: utf-8 -*-
"""
M√≥dulo de hipermutaci√≥n simb√≥lica de EvoAnimusAI.
Realiza mutaciones profundas de funciones, asegurando su validez y trazabilidad.

Nivel: Militar / Gubernamental / Ultra-secreto
"""

import logging
from typing import Callable, Optional

from symbolic_ai.mutation_validator import validate_and_prepare, log_invalid_mutation
from core.agent import EvoAgent  # üîí Protecci√≥n expl√≠cita

logger = logging.getLogger("evoai.hypermutator")
logger.setLevel(logging.INFO)


def mutate_complete_function(function: Callable) -> Optional[Callable]:
    """
    Realiza una mutaci√≥n simb√≥lica de una funci√≥n dada.
    La salida es siempre validada estructuralmente y preparada para ejecuci√≥n segura.

    Args:
        function (Callable): Funci√≥n a mutar.

    Returns:
        Optional[Callable]: Funci√≥n mutada v√°lida o None si la mutaci√≥n falla.
    """
    if isinstance(function, EvoAgent):
        logger.warning(f"[‚õî Hypermutator] Objeto protegido detectado: {function}")
        log_invalid_mutation(function, reason="EvoAgent no debe ser tratado como funci√≥n.")
        return None

    if not callable(function):
        logger.error(f"[‚ùå Hypermutator] El argumento no es callable: {repr(function)}")
        log_invalid_mutation(function)
        return None

    try:
        logger.info(f"[üß¨ Hypermutator] Mutando funci√≥n: {function.__name__}")

        # Simulaci√≥n de mutaci√≥n controlada ‚Äî envuelve la funci√≥n
        def mutated_function(*args, **kwargs):
            logger.info(f"[üß¨ Hypermutator] Funci√≥n mutada llamada: {function.__name__}")
            return function(*args, **kwargs)

        mutated_function.__name__ = f"mutated_{function.__name__}"
        mutated_function.__doc__ = f"Mutated version of {function.__name__}."
        mutated_function.__original_function__ = function

        # Validaci√≥n estructural estricta
        safe_function = validate_and_prepare(mutated_function)

        if not callable(safe_function):
            logger.critical(f"[‚ùå Hypermutator] La funci√≥n mutada NO es callable despu√©s de validaci√≥n.")
            log_invalid_mutation(safe_function)
            return None

        logger.info(f"[‚úÖ Hypermutator] Funci√≥n mutada validada: {safe_function.__name__}")
        return safe_function

    except Exception as e:
        logger.exception(f"[‚ùå Hypermutator] Error durante mutaci√≥n: {e}")
        return None
